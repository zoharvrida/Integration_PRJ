/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package bdsm.scheduler.processor;

import bdsm.scheduler.MapKey;
import bdsm.scheduler.PropertyPersister;
import bdsm.scheduler.StatusDefinition;
import bdsm.scheduler.dao.FixClassConfigDao;
import bdsm.scheduler.dao.FixEmailAccessDao;
import bdsm.scheduler.dao.FixInboxDao;
import bdsm.scheduler.dao.FixSchedulerXtractDao;
import bdsm.scheduler.dao.UlcTmpSrcDao;
import bdsm.scheduler.model.FixClassConfig;
import bdsm.scheduler.model.FixQXtract;
import bdsm.scheduler.model.FixSchedulerXtract;
import bdsm.scheduler.model.UlcTmpSrc;
import bdsm.scheduler.util.FileUtil;
import bdsm.scheduler.util.SchedulerUtil;
import bdsm.util.ExcelUtil;
import java.util.List;
import java.util.Map;
import org.apache.commons.io.FilenameUtils;

/**
 *
 * @author NCBS
 */
public class UlcWorker2 extends BaseProcessor{

    private String configFile;

    public UlcWorker2(Map context) {
        super(context);
        this.configFile = "excelutil.properties";
    }

    @Override
    protected boolean doExecute() throws Exception {
        UlcTmpSrcDao ulcTmpSrcDao = new UlcTmpSrcDao(session);
        FixClassConfigDao classConfigDao = new FixClassConfigDao(session);
        FixSchedulerXtractDao fixSchedulerXtractDao = new FixSchedulerXtractDao(session);
        UlcTmpSrc ulcTmpSrc = null;
        ExcelUtil excel = null;
        FixClassConfig fClassConfig = null;
        FixSchedulerXtract fixSchedulerXtract = null;
        String extFile="";
        String BatchID = context.get(MapKey.batchNo).toString();
        String status = context.get(MapKey.status).toString();
        String param1 = context.get(MapKey.param1).toString();
        String sourceProcess = context.get(MapKey.processSource).toString();
        int idScheduler = Integer.valueOf(context.get(MapKey.idScheduler).toString());
        if (status.equals(StatusDefinition.UNAUTHORIZED)) {
            String outFileName = FileUtil.getDateTimeFormatedFileName(FilenameUtils.getBaseName(context.get(MapKey.param1).toString().replace("UDFULC ", ""))+"{hhmmss}.xls");
            String param5 = context.get(MapKey.param5).toString();
            excel = new bdsm.util.ExcelUtil(param5, configFile);
            List<String[]> data = excel.getData();
            for (int i = 0; i < data.size(); i++) {
                String[] rowData = data.get(i);

                ulcTmpSrc = new UlcTmpSrc();
                ulcTmpSrc.setCodAcctNo(rowData[0]);
                ulcTmpSrc.setCodFieldTag(rowData[1]);
                ulcTmpSrc.setCodTask(rowData[2]);
                ulcTmpSrc.setFieldValue(rowData[3]);
                ulcTmpSrc.setCmd(rowData[4]);
                ulcTmpSrc.setBatch(BatchID);
                ulcTmpSrcDao.insert(ulcTmpSrc);
            }
            //buat ilangin bug
            ulcTmpSrcDao.get(BatchID);
            getLogger().info("LBU : Import Excel file from Requestor Success");

            // do filter and validation
            ulcTmpSrcDao.runUploadUlc(BatchID);
            getLogger().info("LBU : Filter and Validate Source Data Done");
            
            fClassConfig = classConfigDao.get(getClass().getName(),sourceProcess, StatusDefinition.UNAUTHORIZED).get(0);
            idScheduler = fClassConfig.getIdScheduler();
            getLogger().info("Getting IdScheduler = "+idScheduler+" for Source: "+sourceProcess+" and Status : " +StatusDefinition.UNAUTHORIZED + "DONE");
            fixSchedulerXtract = fixSchedulerXtractDao.get(idScheduler);
            extFile = fixSchedulerXtract.getFileFormat();
            outFileName = outFileName.replace(".xls", "."+extFile);
            getLogger().info("Getting file Extension Done : " + outFileName);
            if (!sourceProcess.equalsIgnoreCase("sftp")){
                fixQXtract = new FixQXtract();
                fixQXtract.setIdScheduler(idScheduler);
                fixQXtract.setFlgProcess(StatusDefinition.REQUEST);
                fixQXtract.setDtmRequest(SchedulerUtil.getTime());
                fixQXtract.setParam1("RE: " + param1);
                FixEmailAccessDao fixEmailAccessDao = new FixEmailAccessDao(session);
                fixQXtract.setParam2(fixEmailAccessDao.getSpv(context.get(MapKey.grpId).toString()));
                fixQXtract.setParam4(PropertyPersister.emailApproval);
                fixQXtract.setParam5(outFileName);
                fixQXtract.setParam6(BatchID);
                getLogger().info("ULCWORKER Register FixQXtract Done");
            }
            return true;
        } else if (status.equals(StatusDefinition.AUTHORIZED)) {

            //excel = new ExcelUtil("", configFile);

            ulcTmpSrcDao.runInsertUlc(BatchID);
            getLogger().info("LBU : Run insert to FCR Done");

            ulcTmpSrcDao.runUpdateUlc(BatchID);
            getLogger().info("LBU : Run update to FCR Done");

            //do write excel and send email --> Moved To Fix Execute UlcGenReport
            String out2FileName = FileUtil.getDateTimeFormatedFileName(FilenameUtils.getBaseName(context.get(MapKey.param1).toString().replace("RE: UDFULC ", ""))+"{hhmmss}.xls");
            getLogger().info("ULCWORKER Register FixQXtract");
            fClassConfig = classConfigDao.get(getClass().getName(),sourceProcess, StatusDefinition.AUTHORIZED).get(0);
            idScheduler = fClassConfig.getIdScheduler();
            getLogger().info("Getting IdScheduler = "+idScheduler+" for Source: "+sourceProcess+" and Status : " +StatusDefinition.AUTHORIZED + "DONE");
            fixSchedulerXtract = fixSchedulerXtractDao.get(idScheduler);
            extFile = fixSchedulerXtract.getFileFormat();
            out2FileName = out2FileName.replace(".xls", "."+extFile);
            getLogger().info("Getting file Extention DONE : " + out2FileName);
            fixQXtract = new FixQXtract();
            fixQXtract.setIdScheduler(idScheduler);
            fixQXtract.setFlgProcess(StatusDefinition.REQUEST);
            fixQXtract.setDtmRequest(SchedulerUtil.getTime());
            fixQXtract.setParam1(param1);
            FixEmailAccessDao fixEmailAccessDao = new FixEmailAccessDao(session);
            fixQXtract.setParam3(fixEmailAccessDao.getSpv(context.get(MapKey.grpId).toString()));
            FixInboxDao fixInboxDao = new FixInboxDao(session);
            if (!context.get(MapKey.itemIdLink).toString().equals("")) {
                fixQXtract.setParam2(fixInboxDao.get(context.get(MapKey.itemIdLink).toString()).getSender());
            }
            fixQXtract.setParam4(PropertyPersister.emailDone);
            fixQXtract.setParam5(out2FileName);
            fixQXtract.setParam6(BatchID);
            getLogger().info("ULCWORKER Register FixQXtract Done");
            return true;
        } else if (status.equals(StatusDefinition.REJECTED)) {
            getLogger().info("ULCWORKER Register FixQXtract");
            ulcTmpSrcDao.runRejectUlc(BatchID);
            fixQXtract = new FixQXtract();
            fixQXtract.setIdScheduler(idScheduler);
            fixQXtract.setFlgProcess(StatusDefinition.REQUEST);
            fixQXtract.setDtmRequest(SchedulerUtil.getTime());
            fixQXtract.setParam1(param1);
            FixInboxDao fixInboxDao = new FixInboxDao(session);
            if (!context.get(MapKey.itemIdLink).toString().equals("")) {
                fixQXtract.setParam2(fixInboxDao.get(context.get(MapKey.itemIdLink).toString()).getSender());
            }
            fixQXtract.setParam4(PropertyPersister.emailRejected);
            fixQXtract.setParam5("");
            getLogger().info("ULCWORKER Register FixQXtract");
            return true;

        } else {
            return false;
        }
    }

}
