package bdsm.scheduler.dao;

import bdsm.model.BaseModel;
import bdsm.scheduler.model.CustomResult1;
import bdsm.scheduler.model.FixTemplateMaster;
import bdsm.scheduler.model.FixTemplateMasterPK;
import bdsmhost.dao.BaseDao;
import java.util.List;
import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.criterion.Restrictions;

public class FixTemplateMasterDao extends BaseDao {

    public FixTemplateMasterDao(Session session) {
        super(session);
    }

    public FixTemplateMaster get(FixTemplateMasterPK fixTemplateMasterPK) {
        Criteria criteria = getSession().createCriteria(FixTemplateMaster.class);
        if (fixTemplateMasterPK.getIdTemplate() != null) {
            criteria.add(Restrictions.eq("fixTemplateMasterPK.idTemplate", fixTemplateMasterPK.getIdTemplate()));
        }
        if (fixTemplateMasterPK.getNamTemplate() != null) {
            criteria.add(Restrictions.eq("fixTemplateMasterPK.namTemplate", fixTemplateMasterPK.getNamTemplate()));
        }
        List<FixTemplateMaster> list = criteria.list();
        if (list.size() == 1) {
            return list.get(0);
        }
        return null;
    }

    //For FixImportMail
    public CustomResult1 getAccessTemplate(String sender, String namTemplate, String typFix) {
        CustomResult1 customResult1 = null;
        StringBuilder qry = new StringBuilder("select C.idTemplate, C.namTemplate, C.javaClass");
        qry.append(", B.idScheduler, B.filePattern, B.flgEncrypt, B.modDecrypt, B.keyDecrypt, B.spvAuth");
        qry.append(", A.grpId, A.cdAccess");
        qry.append(" from FixEmailAccess A, FixSchedulerImport B, FixTemplateMaster C");
        qry.append(" where C.typFix =:typFix and lower(A.sender) like :sender and C.namTemplate = :namTemplate");
        qry.append(" and A.idScheduler = B.idScheduler and C.idTemplate = B.idTemplate");

        Query q = getSession().createSQLQuery(qry.toString());
        q.setString("typFix", typFix);
        q.setString("sender", sender.toLowerCase());
        q.setString("namTemplate", namTemplate);

        Object[] customResult = (Object[]) q.uniqueResult();

        if (customResult != null) {
            customResult1 = new CustomResult1();
            customResult1.setIdTemplate(Integer.parseInt(customResult[0].toString()));
            customResult1.setNamTemplate(customResult[1].toString());
            customResult1.setJavaClass(customResult[2].toString());
            customResult1.setIdScheduler(Integer.parseInt(customResult[3].toString()));
            customResult1.setFilePattern(customResult[4].toString());
            customResult1.setFlgEncrypt(customResult[5].toString());
            customResult1.setModDecrypt(customResult[6].toString());
            customResult1.setKeyDecrypt(customResult[7].toString());
            customResult1.setSpvAuth(customResult[8].toString());
            customResult1.setGrpId(customResult[9].toString());
            customResult1.setCdAccess(customResult[10].toString());
        }

        return customResult1;
    }

    //For FolderWatcher
    public CustomResult1 getAccessTemplate(String namTemplate, String typFix) {
        CustomResult1 customResult1 = null;
        StringBuilder qry = new StringBuilder("select C.idTemplate, C.namTemplate, C.javaClass");
        qry.append(", B.filePattern, B.flgEncrypt, B.modDecrypt, B.keyDecrypt, B.spvAuth");
        qry.append(" from FixScheduleImport B, FixTemplateMaster C");
        qry.append(" where C.typFix =:typFix and C.namTemplate = :namTemplate");
        qry.append(" and C.idTemplate = B.idTemplate");

        Query q = getSession().createSQLQuery(qry.toString());
        q.setString("typFix", typFix);
        q.setString("namTemplate", namTemplate);

        Object[] customResult = (Object[]) q.uniqueResult();

        if (customResult != null) {
            customResult1 = new CustomResult1();
            customResult1.setIdTemplate(Integer.parseInt(customResult[0].toString()));
            customResult1.setNamTemplate(customResult[1].toString());
            customResult1.setJavaClass(customResult[2].toString());
            customResult1.setFilePattern(customResult[3].toString());
            customResult1.setFlgEncrypt(customResult[4].toString());
            customResult1.setModDecrypt(customResult[5].toString());
            customResult1.setKeyDecrypt(customResult[6].toString());
            customResult1.setSpvAuth(customResult[7].toString());
        }

        return customResult1;
    }

    @Override
    protected boolean doInsert(BaseModel baseModel) {
        getSession().save(baseModel);
        return true;
    }

    @Override
    protected boolean doUpdate(BaseModel baseModel) {
        getSession().update(baseModel);
        return true;
    }

    @Override
    protected boolean doDelete(BaseModel baseModel) {
        getSession().delete(baseModel);
        return true;
    }
}
