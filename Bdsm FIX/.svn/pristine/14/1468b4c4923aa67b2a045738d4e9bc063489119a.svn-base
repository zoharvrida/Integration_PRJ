/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package bdsm.scheduler.processor;

import bdsm.scheduler.MapKey;
import bdsm.scheduler.PropertyPersister;
import bdsm.scheduler.StatusDefinition;
import bdsm.scheduler.dao.FixLogDao;
import bdsm.scheduler.dao.FixQXtractDao;
import bdsm.scheduler.model.FixLog;
import bdsm.scheduler.model.FixQXtract;
import bdsm.scheduler.util.FileUtil;
import bdsm.scheduler.util.SchedulerUtil;
import bdsm.util.HibernateUtil;
import java.io.File;
import java.lang.reflect.Constructor;
import java.util.Map;
import org.hibernate.Transaction;

/**
 *
 * @author bdsm
 */
public class FileObjectReflection extends BaseReflection {

    @Override
    public void execute(Map context) {
        this.session = HibernateUtil.getSession();
        String inboxId = context.get(MapKey.batchNo).toString();
        updateFixLog(inboxId, StatusDefinition.PROCESS);
        Class[] paramString = new Class[1];
        paramString[0] = Map.class;
        Class cls;

        try {
            String javaClass = context.get(MapKey.javaClass).toString();
            String filepath = context.get(MapKey.filePath).toString();
            String filename = context.get(MapKey.fileName).toString();
            //move file to process folder
            File file = new File(filepath + filename);

            if (file.renameTo(new File(PropertyPersister.dirFixInProc + filename))) {
                context.put(MapKey.param5, PropertyPersister.dirFixInProc + filename);
            }

            //decrypt
            if (context.get(MapKey.flgEncrypt).toString().equals("Y")) {
                getLogger().info("Decrypting File " + context.get(MapKey.param5).toString());
                String modDecrypt = context.get(MapKey.modDecrypt).toString();
                String keyDecrypt = context.get(MapKey.keyDecrypt).toString();
                String newFile = FileUtil.decrypt(context.get(MapKey.param5).toString(), modDecrypt, keyDecrypt, context.get(MapKey.fileBackup).toString());
                context.put(MapKey.param5, PropertyPersister.dirFixInProc + newFile);
                getLogger().info("Decrypting File " + context.get(MapKey.param5).toString() + " DONE");
            }

            getLogger().info("fileName = " + context.get(MapKey.fileName));

            cls = Class.forName(javaClass);
            Constructor cons = cls.getConstructor(paramString);

            //1st execute
            getLogger().info("Execute class " + javaClass + " 1st");
            context.put(MapKey.session, this.session);
            context.put(MapKey.status, StatusDefinition.UNAUTHORIZED);
            BaseProcessor baseProcessor = (BaseProcessor) cons.newInstance(context);
            boolean success = baseProcessor.execute();
            getLogger().info("Finish class" + javaClass + " 1st execution. Result = " + success);

            //2nd execute
            if (success) {
                getLogger().info("Execute class " + javaClass + " 2nd");
                context.put(MapKey.status, StatusDefinition.AUTHORIZED);
                context.remove(MapKey.param5);
                success = baseProcessor.execute();
                getLogger().info("Finish class" + javaClass + " 2nd execution. Result = " + success);
                updateFixLog(inboxId, StatusDefinition.DONE);
                if (success) {
                   
                    FixQXtract fixQXtract;
                    if ((fixQXtract = (FixQXtract) context.get(MapKey.fixQXtract)) != null) {
                         getLogger().info("Register FixQXtract");
                        FixQXtractDao fixQXtractDao = new FixQXtractDao(this.session);
                        Transaction tx = this.session.beginTransaction();
                        fixQXtractDao.insert(fixQXtract);
                        tx.commit();
                         getLogger().info("Register FixQXtract DONE");
                    }
                }
            }

        } catch (Exception ex) {
            getLogger().error(ex);
            updateFixLog(inboxId, StatusDefinition.ERROR);
        } finally {
            HibernateUtil.closeSession(this.session);
        }
    }

    private void updateFixLog(String inboxId, String sd) {
        FixLogDao fixLogDao = new FixLogDao(this.session);
        FixLog fixLog = fixLogDao.get(inboxId);
        fixLog.setFlgProcess(sd);
        if (sd.equals(StatusDefinition.PROCESS)) {
            fixLog.setDtmStartProcess(SchedulerUtil.getTime());
        } else if (sd.equals(StatusDefinition.DONE) || sd.equals(StatusDefinition.ERROR)) {
            fixLog.setDtmEndProcess(SchedulerUtil.getTime());
        }
        Transaction tx = this.session.beginTransaction();
        fixLogDao.update(fixLog);
        tx.commit();
    }
}
